/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.codename1.webrtc;

/**
 * The MediaStreamTrack interface represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.
 * @author shannah
 * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack
 */
public interface MediaStreamTrack extends RefCounted, EventTarget {
    /**
     * A string that may be used by the web application to provide a hint as to what type of content the track contains to guide how it should be treated by API consumers.
     * @return 
     */
    public String getContentHint();
    
    /**
     * A Boolean whose value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.
     * @return 
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled
     */
    public boolean isEnabled();
    
    /**
     * A Boolean whose value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.
     * @param enabled 
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled
     */
    public void setEnabled(boolean enabled);
    
    /**
     * Returns a DOMString containing a unique identifier (GUID) for the track; it is generated by the browser.
     * @return 
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/id
     */
    public String getId();
    
    /**
     * Returns a DOMString set to "audio" if the track is an audio track and to "video", if it is a video track. It doesn't change if the track is deassociated from its source.
     * @return 
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/kind
     */
    public TrackKind getKind();
    
    /**
     * Returns a DOMString containing a user agent-assigned label that identifies the track source, as in "internal microphone". The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed.
     * @return 
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/label
     */
    public String getLabel();
    
    /**
     * Returns a Boolean value indicating whether the track is unable to provide media data due to a technical issue.
     * @return 
     * https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/muted
     */
    public boolean isMuted();
    
    /**
     * Returns a Boolean value with a value of true if the track is readonly (such a video file source or a camera that settings can't be modified), false otherwise.
     * @return 
     */
    public boolean isReadOnly();
    
    /**
     * Returns an enumerated value giving the status of the track. This will be one of the following values:
     *  . "live" which indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the enabled attribute.
     *  . "ended" which indicates that the input is not giving any more data and will never provide new data.
     * 
     * @return 
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/readyState
     */
    public ReadyState getReadyState();
    
    /**
     * Returns a Boolean with a value of true if the track is sourced by a RTCPeerConnection, false otherwise.
     * @return 
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/remote
     */
    public boolean isRemote();
    
    /**
     * Lets the application specify the ideal and/or ranges of acceptable values for any number of the available constrainable properties of the MediaStreamTrack.
     * @param constraints
     * @return 
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/applyConstraints
     */
    public Promise applyConstraints(MediaTrackConstraints constraints);
    
    /**
     * Returns a duplicate of the MediaStreamTrack.
     * @return 
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/clone
     */
    public MediaStreamTrack clone();
    
    /**
     * Returns a MediaTrackConstraints object containing the currently set constraints for the track; the returned value matches the constraints last set using applyConstraints().
     * @return 
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getConstraints
     */
    public MediaTrackConstraints getConstraints();
    
    /**
     * Returns a MediaTrackSettings object containing the current values of each of the MediaStreamTrack's constrainable properties.
     * @return 
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getSettings
     */
    public MediaTrackSettings getSettings();
    
    /**
     * Stops playing the source associated to the track, both the source and the track are deassociated. The track state is set to ended.
     * 
     * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/stop
     */
    public void stop();
    
    /**
     * Status enum to record the state of a {@link MediaStreamTrack}
     */
    public static enum ReadyState {
        
        /**
         * indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the enabled attribute.
         */
        Live("live"),
        
        /**
         * indicates that the input is not giving any more data and will never provide new data.
         */
        Ended("ended");
        private String string;
        ReadyState(String str) {
            string = str;
        }
        public boolean matches(String str) {
            return string.equals(str);
        }
    }
    
   
}
